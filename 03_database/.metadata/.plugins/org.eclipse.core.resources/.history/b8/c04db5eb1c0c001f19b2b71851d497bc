-- New script in localhost.
-- Connection Type: dev 
-- Url: jdbc:oracle:thin:@//localhost:1521/XE
-- workspace : C:\Database
-- Date: 2024. 5. 7.
-- Time: 오전 10:10:05


--DB는 저장할 대상을 선정하고
--대상에 어떤 속성(컬럼, 항목)들이 정의해야한다.
--
--대상 == OBJECT == 객체, 개체 == ENTITY(엔터티, 엔티티)
--
--쇼핑몰을 만들 때 저장할 대상 3가지 : 회원, 게시판, 물건
--==> 저장할 대상(엔티티, 개체) 
--==> 개체는 "테이블"로 만들게 된다.!!
--==> 관계성: 회원이 물건을 사다.!(저장할 필요)
--                 관계성 "테이블"로 만들게 된다.!!

--CREATE TABLE MEMBER -- 이미 있어서 그냥 안만듬 
--   (	
--  ID VARCHAR2(10), 
--	PW VARCHAR2(10), 
--	NAME VARCHAR2(10), 
--	TEL VARCHAR2(10)
--   )

CREATE TABLE BBS
(	
	NO NUMBER(38,0),
	TITLE VARCHAR2(100),
	CONTENT VARCHAR2(100),
	WRITER VARCHAR2(100)
);

CREATE TABLE PRODUCT(
	id  NUMBER(38,0),
	name varchar2(200), 
	content varchar2(200), 
	price varchar2(200), 
	company varchar2(200), 
	img varchar2(200)
);

-- DML(Data Manupulation Language)
-- INSERT, UPDATE, DELETE, SELECT
-- : 데이터 조작 언어, 테이블에 값을 삽입하거나, 수정하거나,
--   삭제하거나, 조회하는 언어


--INSERT : 새로운행을 추가하는 구문이다. 
--         테이블의 행의 갯수가 증가한다. 

-- 테이블에 모든 컬럼에 대해 값을 INSERT
-- INSERT INTO 테이블명  VALUES(데이터, 데이터,,,,...)

-- 테이블에 일부컬럼에대해 INSERT
 -- INSERT INTO 테이블명(컬럼명, 컬럼명, 컬럼명,....)  VALUES(데이터, 데이터,데이터,,,...)

-- INSERT 연습

INSERT INTO "MEMBER" VALUES('100', '100', 'park', '011');
COMMIT;

/*@ DQL(Data Query Language)
데이터를 검색 추출하기 위해 사용하는 언어 
DQL은 DML에 속한언어이기도 하다. 
데이터조회한 결과를 Result set(행들의 집합)이라고 한다.
->0개이상의 행이 포함될수 있고 , 특정기준에 의해 정렬될수 있다. 
*/
/*
@SELECT 기본 작성법
1. SELECT 컬럼명 FROM 테이블명;
2. SELECT 컬럼명 FROM 테이블명 WHERE 조건;

SELECT : 조회하고자하는 컬럼명을 기술, 여러개로 기술하고하하면, (쉼표)로 구분, 
        모든컬럼조회시 * 를 사용
FROM : 조회 대상 컬럼이 포함된 테이블 명을 기술 
WHERE: 행을 선택하는 조건을 기술 
       여러개의 제한조건을 포함할수있고 각 제한조건은 논리연산자로 연결, 제한조건에 만족하는 행들만 
       RESULT SET 에 포함됨
  
*/

SELECT ID, PW
FROM "MEMBER" 
WHERE ID = 100;

--리터럴 : 임의로 지정한 문자열을 SELECT 절에 사용하면 테이블에 존재하는 데이터 처럼 사용 할수 있다.
-- 모든 행에 반복 표시된다

SELECT ID, Name, '원' 단위
FROM "MEMBER";

-- 연결연산자를 이용해서 여러컬럼을 하나의 컬럼인것 처럼 연결할수 있다 (||)
-- 컬럼과 컬럼을 연결
SELECT ID||':'||NAME VAL FROM "MEMBER";

SELECT id||' 의 이름은 '|| name VAL
FROM "MEMBER" ;
	

--UPDATE : 테이블에 기록된 컬럼의 값을 수정하는 구문이다 
--         테이블의 전체행의 갯수는 변화가 없다. 


-- UPDATE 테이블명 SET 컬럼명 = 바꿀값, 컬럼명 = 바꿀값, ...
-- [WHERE 컬럼명 비교연산자 비교값 ] 

UPDATE MEMBER SET NAME = 'KIM' WHERE ID = '100';

UPDATE MEMBER SET NAME = 'YANG' WHERE ID = '200';

UPDATE MEMBER SET NAME = 'LEE' WHERE ID = '300';
  
SELECT * FROM MEMBER ;  

COMMIT;
UPDATE MEMBER SET PW = '8888', TEL = '9999' WHERE ID = 'ICE';

--DELETE : 테이블의 행을 삭제하는 구문이다 , 행의 갯수가 줄어듬
--DELETE FROM 테이블명 WHERE 조건설정
-- 만약 WHERE 에 조건을 설정하지않으면 모든 행이 삭제 



DELETE FROM MEMBER WHERE ID = '100';

DELETE FROM MEMBER WHERE TEL = '011';
ROLLBACK;


-- TRUNCATE : 테이블의 전체행을 삭제할시 사용된다
--            DELETE  보다 수행속도 빠르다
--            ROLLBACK 을 통해 복구 할수 없다.

SELECT * FROM MEMBER;
COMMIT;
DELETE FROM MEMBER;
ROLLBACK;

TRUNCATE TABLE MEMBER;
ROLLBACK;

--제약조건 걸기

CREATE TABLE MEMBER2
   (
    ID NUMBER(10) PRIMARY KEY , 
PW VARCHAR2(10), 
NAME VARCHAR2(10), 
TEL VARCHAR2(10)
   );
  
  CREATE TABLE BBS2
(	NO NUMBER(10), 
	TITLE VARCHAR2(100), 
	CONTENT VARCHAR2(100), 
	WRITER NUMBER(10), 
	 CONSTRAINT BBS_PK2 PRIMARY KEY (NO),
	 CONSTRAINT FK_MEMBER2 FOREIGN KEY (WRITER)
	  REFERENCES MEMBER2(ID)
);

--제약조건 
-- 테이블작성시 각 컬럼에 대해 값 기록에 대한 제약조건을 설정할수 있다. 
-- 데이터 무결성 보장을 목적으로함 
-- 입력 / 수정 하는 데이터에 문제가 없는지 자동으로 검사하는 목적
-- PRIMARY KEY, NOT NULL, UNIQUE, CHECK, FOREIGN KEY




--NOT NULL : 해당 컬럼에 반드시 값을 기록해야하는경우 사용
--           삽입/ 수정시 NULL 값을 허용하지 않도록 '컬럼레벨에서 제한 '

/*--------------------------------------------------------------------    
-- 아무런 제약 조건이 설정되지않은경우 NULL 값이 문제없이 삽입 됨,
-- ex) 제약조건 없으면 회원가입시 정보를 입력 하지않아도 가입이 처리 됨..
--------------------------------------------------------------------  */    


-- UNIQUE  제약조건 : 컬럼에 입력값에대한 중복을 제한하는 제약조건  
--                   컬럼레벨, 테이블레벨에서 설정가능

/*-----------------------------------------------------------------------
--	※ 실제 데이터 확인히 중복된 값이 들어가도 처리가 됨
--	ex) 회원 가입시 중복된 아이디가 가입되면 회원들을 구분할수 없게 됨

--	 ※ 2개의 데이터를 삽입시 UNIQUE 제약 조건이 발생함
	UNIQUE 제약조건이 설정된 컬럼에는 중복 값은 넣을 수 없게 됨

	※ UNIQUE 제약 조건이 설정되었다 하더라도 NULL값으로 넣게 되면
	중복 처리가 되어 버림 
	이때 해결 방법은 UNIQUE 제약조건과 NOT NULL 제약 조건을 같이 주면 됨
------------------------------------------------------------------------*/

--PRIMARY KEY(기본키) 제약조건 
-- : 테이블에서 한행의 정보를 찾기위해 사용할 컬럼을 의미
-- 테이블에 대한 식별자 역할을 한다. 
-- NOT NULL+ UNIQUE제약조건의 의미
-- 한 테이블당 한개만 설정
-- 컬럼 레벨, 테이블 레벨 둘다 설정 가능함
-- 한개 컬럼에 설정할수 있고, 여러개 컬럼 묶어서(복합키) 설정 할수 있음 

--> VARCHAR2, CHAR의 차이 
--> VARCHAR2(100) : VAR(변하다, VARIABLE) + CHAR(문자)
-->           2글자이면 2글자들어갈 만큼만 저장공간을 사용
-->           100글자이면 100글자들어갈 만큼 저장공간을 저장 
--> CHAR(100) : 저장공간이 고정, 주민번호, 전화번호, 우편번호, 사번


CREATE TABLE MEMBER4 
(	ID VARCHAR2(100) PRIMARY KEY, -- 컬럼레벨 에서 지정
	PW VARCHAR2(100) NOT NULL, 
	NAME VARCHAR2(100) NOT NULL, 
	TEL VARCHAR2(100)
);

-- FOREIGN KEY(외부키 / 외래키) 제약조건 : 
-- 참조(REFERENCES)된 다른 테이블에서 제공하는 값만 사용할 수 있음
-- 참조 무결성을 위배하지 않게 하기 위해 사용
-- FOREIGN KEY제약조건에 의해서 
-- 테이블간의 관계(RELATIONSHIP)가 형성됨--> JOIN이 가능해짐 
-- 제공되는 값 외에는 NULL을 사용할 수 있음

-- 컬럼레벨일 경우
-- 컬럼명 자료형(크기) [CONSTRAINT 이름] REFERENCES 참조할테이블명 [(참조할컬럼)] [삭제룰]

-- 테이블 레벨일 경우
-- [CONSTRAINT 이름] FOREIGN KEY (적용할컬럼명) REFERENCES 참조할테이블명 [(참조할컬럼)] [삭제룰]


-- 참조할 테이블의 참조할 컬럼명이 생략되면
-- PRIMARY KEY로 설정된 컬럼이 자동 참조할 컬럼이 됨
-- 참조될 수 있는 컬럼은 PRIMARY KEY 컬럼과,
-- UNIQUE 지정된 컬럼만 외래키로 사용할 수 있음


CREATE TABLE BBS4
(
  NO NUMBER, 
  TITLE VARCHAR2(100), 
  CONTENT VARCHAR2(100), 
  WRITER VARCHAR2(100), 
  CONSTRAINT PK_BBS4 PRIMARY KEY (NO),
  CONSTRAINT FK_BBS_WRITER4 FOREIGN KEY (WRITER) REFERENCES MEMBER4(ID)
  );
  
 CREATE TABLE REPLY4
 	(
 		ID NUMBER PRIMARY KEY,
 		ORIID NUMBER NOT NULL.
 		CONTENT VARCHAR2(100),
 		WRITER VARCHAR2(100) NOT NULL,
 		CONSTRAINT FK_RERLY_WRITER FOREIGN KEY (WRITER) REFERENCES MEMBER4(ID),
 		CONSTRAINT FK_RERLY_ORIID FOREIGN KEY (ORIID) REFERENCES BBS4(NO),
	);
 	
 	
 